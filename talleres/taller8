def merge_sort(arreglo):
    if len(arreglo) <= 1:
        return arreglo
        
    mitad = len(arreglo) // 2
    left, right = merge_sort(arreglo[:mitad]), merge_sort(arreglo[mitad:])

    return merge(left, right, arreglo.copy())


def merge(left, right, solucion):

    l_pos, r_pos = 0, 0
    while l_pos < len(left) and r_pos < len(right):
      
        if left[l_pos] <= right[r_pos]:
            solucion[l_pos+r_pos]=left[l_pos]
            l_pos += 1
        else:
            solucion[l_pos + r_pos] = right[r_pos]
            r_pos += 1
            
    for l_pos in range(l_pos, len(left)):
        solucion[l_pos + r_pos] = left[l_pos]
        
    for r_pos in range(r_pos, len(right)):
        solucion[l_pos + r_pos] = right[r_pos]

    return solucion
    
def quicksort(x):
    
    if len(x) == 1 or len(x) == 0:
        return x
    else:
        pivote = x[0]
        i = 0
        for j in range(len(x)-1):
            if x[j+1] < pivote:
                x[j+1],x[i+1] = x[i+1], x[j+1]
                i += 1
        x[0],x[i] = x[i],x[0]
        first_part = quicksort(x[:i])
        second_part = quicksort(x[i+1:])
        first_part.append(x[i])
        return first_part + second_part    
        
"Quickshort vs mergeshort, quicksort tiene una constante menor, asi que si ambos son tiempo O(n log n"
"quicksort va a ser mas rapido. ademas quicksort en practica es mas rapido"
"debido a que tiene a acertar al mejor de los casos que al peor"